{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  items: [],\n  status: \"idle\",\n  error: null\n};\nexport const fetchTasks = createAsyncThunk(\"tasks/fetchTasks\", async () => {\n  const response = await axios.get(\"/api/tasks\");\n  return response.data;\n});\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    addTask: (state, action) => {\n      state.items.push(action.payload);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTasks.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchTasks.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.items = action.payload;\n    }).addCase(fetchTasks.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message || \"Erreur inconnue\";\n    });\n  }\n});\nexport const {\n  addTask\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","items","status","error","fetchTasks","response","get","data","tasksSlice","name","reducers","addTask","state","action","push","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["/Users/shammy/Documents/GitHub/taskhub/frontend/src/features/taskSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\ninterface Task {\n  id: number;\n  title: string;\n  description: string;\n  status: string;\n}\n\ninterface TasksState {\n  items: Task[];\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n  error: string | null;\n}\n\nconst initialState: TasksState = {\n  items: [],\n  status: \"idle\",\n  error: null,\n};\n\nexport const fetchTasks = createAsyncThunk(\"tasks/fetchTasks\", async () => {\n  const response = await axios.get(\"/api/tasks\");\n  return response.data;\n});\n\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    addTask: (state, action: PayloadAction<Task>) => {\n      state.items.push(action.payload);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTasks.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchTasks.fulfilled, (state, action: PayloadAction<Task[]>) => {\n        state.status = \"succeeded\";\n        state.items = action.payload;\n      })\n      .addCase(fetchTasks.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.error.message || \"Erreur inconnue\";\n      });\n  },\n});\n\nexport const { addTask } = tasksSlice.actions;\nexport default tasksSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAC/E,OAAOC,KAAK,MAAM,OAAO;AAezB,MAAMC,YAAwB,GAAG;EAC/BC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGN,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACzE,MAAMO,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,YAAY,CAAC;EAC9C,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAGX,WAAW,CAAC;EAC7BY,IAAI,EAAE,OAAO;EACbT,YAAY;EACZU,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAA2B,KAAK;MAC/CD,KAAK,CAACX,KAAK,CAACa,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAClC;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,UAAU,CAACe,OAAO,EAAGP,KAAK,IAAK;MACtCA,KAAK,CAACV,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDgB,OAAO,CAACd,UAAU,CAACgB,SAAS,EAAE,CAACR,KAAK,EAAEC,MAA6B,KAAK;MACvED,KAAK,CAACV,MAAM,GAAG,WAAW;MAC1BU,KAAK,CAACX,KAAK,GAAGY,MAAM,CAACE,OAAO;IAC9B,CAAC,CAAC,CACDG,OAAO,CAACd,UAAU,CAACiB,QAAQ,EAAE,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACV,MAAM,GAAG,QAAQ;MACvBU,KAAK,CAACT,KAAK,GAAGU,MAAM,CAACV,KAAK,CAACmB,OAAO,IAAI,iBAAiB;IACzD,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEX;AAAQ,CAAC,GAAGH,UAAU,CAACe,OAAO;AAC7C,eAAef,UAAU,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}